[
    {
        "methods": [
            {
                "descs": ["long 형으로 주어진 시간(date)을 포맷(format)에 맞춰서 출력한다. long 형의 시간 값은 DateUtil.parse(), DateUtil.currentTimeMIllis() 를 통해 구할 수 있다."],
                "title": "String format(long date, String format)",
                "return": "포맷팅된 날짜",
                "example": "var formattedDate = dateUtil.format(1414460642364, \"yyyyMMddHHmmss\"); // => 20141028104502 \nvar formattedDate = dateUtil.format(1414460642364, \"yyyyMMdd\"); // => 20141028\nvar formattedDate = dateUtil.format(1414460642364, \"yyyy-MM-dd\"); // => 2014-10-28"
            },
            {
                "descs": ["포맷(format)에 맞춰 포맷팅된 시간값(date)를 long 형태의 시간 값으로 변환한다."],
                "title": "long parse(String date, String format)",
                "return": "long 타입의 시간 값",
                "example": "var dateValue = dateUtil.parse(\"20141028104502\", \"yyyyMMddHHmmss\"); // => 1414460642364\nvar dateValue = dateUtil.parse(\"20141028\", \"yyyyMMdd\"); // => 1414422000000\nvar dateValue = dateUtil.parse(\"2014 10-28\", \"yyyy MM-dd\"); // => 1414422000000"
            },
            {
                "descs": ["현재 시간을 long 형태의 시간 값으로 변환한다."],
                "title": "long currentTimeMillis()",
                "return": "long 타입의 시간값",
                "example": "var currentTime = dateUtil.currentTimeMillis(); // => 1414460642364"
            }
        ],
        "class": "DateUtil"
    },
    {
        "methods": [
            {
                "descs": ["지정된 데이터베이스(dbName)에 대해서 insert, update, delete 쿼리(query)를 실행한다. 데이터베이스는 [[manual#registerdb|registerdb]] 메뉴를 통해 미리 등록되어 있어야 한다."],
                "title": "void executeQuery(String dbName, String query)",
                "example": "dbHandler.executeQuery(\"sampleDb1\", \"insert into test_table(value1, value2) values(\"test1\", \"test2\");"
            },
            {
                "descs": ["지정된 데이터베이스(dbName)에 대해서 insert, update, delete 쿼리(query)를 batch로 실행한다. 데이터베이스는 [[manual#registerdb|registerdb]] 메뉴를 통해 미리 등록되어 있어야 한다."],
                "title": "void executeBatch(String dbName, String[] queries)",
                "example": "var queries = [];\nqueries.push(\"insert into test_table (value1) values('test1')\");\nqueries.push(\"insert into test_table (value1) values('test2')\");\nqueries.push(\"insert into test_table (value1) values('test3')\");\ndbHandler.executeBatch(\"sampleDb1\", queries);"
            },
            {
                "descs": [
                    "지정된 데이터베이스(dbName)에 대해서 select 쿼리(query)를 실행한 결과를 String 형식으로 반환한다. 반환되는 데이터들의 row간 구분자는 '\\n', column간 구분자는 공백(' ')으로 구성된다. 데이터베이스는 [[manual#registerdb|registerdb]] 메뉴를 통해 미리 등록되어 있어야 한다.",
                ],
                "return": "select 쿼리의 결과",
                "title": "String selectQuery(String dbName, String query)",
                "example": "var result = dbHandler.selectQuery(\"sampleDb1\", \"select value1, value2 from test_table\"); // => \"test|test2\\ntest3|test4\""
            },
            {
                "descs": [
                    "지정된 데이터베이스(dbName)에 대해서 select 쿼리(query)를 실행한 결과를 DbRowIterator 형식으로 반환한다. DbRowIterator 클래스를 통해 건수가 많은 데이터를 한번에 불러와 메모리에 과다 적재되는 문제를 방지하고 한 행씩 받아 처리할 수 있다.",
                    "DbRowIterator는 next()와 close() 두 개의 메소드를 가지는데, next()는 다음행 데이터를 문자열 배열 형태로 반환하며 마지막 행에 다다랐을 경우 null을 반환하고 close() 메소드는 데이터베이스와의 연결을 끊는다.",
                ],
                "return": "DbRowIterator",
                "title": "String selectQueryIterator(String dbName, String query)",
                "example": "var rowIterator = dbHandler.selectQueryIterator(\"sampleDb1\", \"select value1, value2 from test_table\");\nvar row = null;\nwhile((row = rowIterator.next()) != null){\n  logger.info(\"column count is \" + row.length); // rowIterator.next()를 통해 문자열 배열 형태로 받았기 때문에 length 속성을 통해 컬럼 갯수를 확인할 수 있다.\n  for(var i=0; i<row.length; i++){\n    logger.info(\"column \" + i + \" : \" + row[i]); //각 컬럼별로 값을 로그로 출력한다.\n  } //for i\n} //while\nrowIterator.close(); //사용이 끝난 DbRowIterator는 항상 close 메소드를 호출하여 데이터베이스와의 연결을 종료시킨다."
            },
            {
                "descs": ["지정된 데이터베이스(dbName)에 대해서 select 쿼리(query)를 실행한 결과를 String 형식을 변환하여 반환한다. 반환되는 데이터의 row간 구분자는 '\\n', column간 구분자는 파라미터에서 지정된 delimiter로 구성된다. 데이터베이스는 [[manual#registerdb|registerdb]]메뉴를 통해 미리 등록되어 있어야 한다."],
                "title": "String selectQuery(String dbName, String query, String delimiter)",
                "return": "select 쿼리의 결과",
                "example": "String result = dbHandler.selectQuery(\"sampleDb1\", \"select value1, value2 from test_table\", \",\"); // => \"test1,test2\\ntest3,test4\""
            },
            {
                "descs": ["지정된 데이터베이스(dbName)에 대해서 select 쿼리(query)를 실행한 결과를 곧바로 파일로 출력한다. 출력되는 데이터들의 row간 구분자는 '\\n', column 간 구분자는 파라미터에서 지정된 delimiter로 구성된다. 데이터베이스는 [[manual#registerdb|registerdb]]메뉴를 통해 미리 등록되어 있어야 한다."],
                "title": "void selectAndAppend(String dbName, String query, String delimiter, String filename, String charsetName)",
                "example": "dbHandler.selectAndAppend(\"sampleDb1\", \"select value1, value2 from test_table\", \",\", \"/data/output.txt\", \"UTF-8\");"
            }
        ],
        "class": "DbHandler"
    },
    {
        "methods": [
            {
                "descs": ["파라미터 content에 담긴 내용을 파일로 출력한다. filename은 절대경로를 포함한 파일명으로 작성되어야 하며 해당 파일이 없을 경우 자동으로 생성한다. 기존에 파일 내 기록된 내용이 있을 경우 덮어써진다."],
                "title": "void write(String filename, String content)",
                "example": "fileExporter.write(\"/data/output.txt\", \"this is output.txt\"); // => /data/output.txt 파일이 생성되며 \"this is output.txt\" 파일이 기록된다."
            },
            {
                "descs": ["파라미터 content에 담긴 내용을 지정된 캐릭터셋(charsetName)으로 파일에 출력한다. filename은 절대경로를 포함한 파일명으로 작성되어야 하며 해당 파일이 없을 경우 자동으로 생성한다. 기존에 파일 내 기록된 내용이 있을 경우 덮어써진다."],
                "title": "void write(String filename, String content, String charsetName)",
                "example": "fileExporter.write(\"/data/output.txt\", \"this is output.txt\", \"euc-kr\");\nfileExporter.write(\"/data/output.txt\", \"this is output.txt\", \"utf8\");\nfileExporter.write(\"/data/output.txt\", \"this is output.txt\", \"cp949\");"
            },
            {
                "descs": [
                    "파라미터 content에 담긴 내용을 파일에 출력한다. filename은 절대경로를 포함한 파일명으로 작성되어야 하며 해당 파일이 없을 경우 자동으로 생성한다. 기존에 파일 내 기록된 내용이 있을 경우 뒤에 이어서 기록된다.",
                    "Exmaple"
                ],
                "title": "void append(String filename, String content)",
                "example": "fileExporter.write(\"/data/output.txt\", \"this is test.txt\");"
            },
            {
                "descs": ["파라미터 content에 담긴 내용을 지정된 캐릭터셋(charsetName)으로 파일에 출력한다. filename은 절대경로를 포함한 파일명으로 작성되어야 하며 해당 파일이 없을 경우 자동으로 생성한다. 기존에 파일 내 기록된 내용이 있을 경우 뒤에 이어서 기록된다."],
                "title": "void append(String filename, String content, String charsetName)",
                "example": "fileExporter.write(\u201c/data/output.txt\u201d, \u201cthis is output.txt\u201d, \u201ceuc-kr\u201d);\nfileExporter.write(\u201c/data/output.txt\u201d, \u201cthis is output.txt\u201d, \u201cutf8\u201d);\nfileExporter.write(\u201c/data/output.txt\u201d, \u201cthis is output.txt\u201d, \u201ccp949);"
            },
            {
                "descs": ["filename에 해당하는 파일을 생성한다. filename은 절대경로를 포함한 파일명으로 작성되어야 한다."],
                "title": "void createFile(String filename)",
                "example": "fileExporter.createFile(\"/data/output.txt\"); // => /tmp/output.txt 파일이 생성된다."
            }
        ],
        "class": "FileExporter"
    },
    {
        "methods": [
            {
                "descs": ["task에 담긴 로직을 period 주기에 따라 반복하여 실행한다. period는 밀리초를 기준으로 지정되어야 한다."],
                "title": "void schedule(long period, Runnable task)",
                "example": "scheduler.schedule(5*1000, new java.lang.Runable(){\n\trun:function(){\n\t\tlogger.info(\u201ctest log\u201d);\n\t}\n});\n//=> 5초마다 주기적으로 로그를 남긴다."
            },
            {
                "descs": ["task에 담긴 로직을 delay 만큼의 시간 이후에 period 주기에 따라 반복하여 실행한다. Delay와 period는 밀리초를 기준으로 지정되어야 한다."],
                "title": "void schedule(long delay, long period, Runnable task)",
                "example": "\tscheduler.schedule(3*1000, 5*1000, new java.lang.Runable(){\n\t\trun:function(){\n\t\t\tlogger.info(\u201ctest log\u201d);\n\t\t}\n\t});\n// => 3초후부터 5초마다 주기적으로 로그를 남긴다."
            }
        ],
        "class": "Scheduler"
    },
    {
        "methods": [
            {
                "descs": ["간단한 key-value 형태의 데이터를 저장한다. 저장된 내용은 conf/simple_repo.properties 파일 내에 xml 형태로 저장되어 재기동 이후에도 유지된다. 같은 key를 가진 서로 다른 데이터 value가 저장될 경우 나중에 요청된 value가 저장된다."],
                "title": "void store(String key, String value)",
                "example": "simpleRepo.store(\u201clastExecutedTime\u201d, \u201c2014 1028 1139\u201d);"
            },
            {
                "descs": ["해당 key에 대한 value 데이터를 불러온다. 해당 key에 대한 데이터가 없을 경우 null을 반환한다."],
                "title": "String load(String key)",
                "example": "simpleRepo.load(\u201clastExecutedTime\u201d);  // => \u201c2014 1028 1139\u201d"
            },
            {
                "descs": ["해당 key에 대한 value 데이터를 불러온다. 해당 key에 대한 데이터가 없을 경우 defaultValue를 반환한다."],
                "title": "String load(String key, String defaultValue)",
                "example": "simpleRepo.load(\u201cfirstExecutedTime\u201d, \u201c2014 1028 1000\u201d); //\u201dfirstExecutedTime\u201d key에 대한 데이터가 없을 경우\n// => \u201c2014 1028 1000\u201d"
            },
            {
                "descs": ["key-value 저장소에 저장된 데이터들을 초기화한다."],
                "title": "void clear()",
                "example": "simpleRepo.clear();"
            }
        ],
        "class": "SimpleRepo"
    },
    {
        "methods": [
            {
                "descs": ["프로세스 종료를 위한 포트를 개방한다. 기본 포트는 8021이다."],
                "title": "void openShutdownPort()",
                "example": "runtimeUtil.openShutdownPort();"
            },
            {
                "descs": ["프로세스 종료를 위한 포트(port)를 지정하여 개방한다. "],
                "title": "void openShutdownPort(int port)",
                "example": "runtimeUtil.openShutdownPort();"
            },
            {
                "descs": ["지정된 밀리초(timeMillis)만큼 멈춘다."],
                "title": "void sleep(long timeMillis)",
                "example": "runtimeUtil.sleep(1000); //1초 멈춤"
            },
            {
                "descs": ["프로세스를 종료한다."],
                "title": "void shutdown()",
                "example": "runtimeUtil.shutdown();"
            }
        ],
        "class": "RuntimeUtil"
    },
    {
        "methods": [
            {
                "descs": ["INFO 로그를 남긴다."],
                "title": "void info(String message)",
                "example": "logger.info(\u201cthis is info log\u201d);"
            },
            {
                "descs": ["DEBUG 로그를 남긴다."],
                "title": "void debug(String message)",
                "example": "logger.debug(\u201cthis is debug log\u201d);"
            },
            {
                "descs": ["WARN 로그를 남긴다."],
                "title": "void warn(String message)",
                "example": "logger.warn(\u201cthis is warn log\u201d);"
            },
            {
                "descs": ["ERROR 로그를 남긴다."],
                "title": "void error(String message)",
                "example": "logger.error(\u201cthis is error log\u201d);"
            },
            {
                "descs": ["TRACE 로그를 남긴다."],
                "title": "void trace(String message)",
                "example": "logger.trace(\u201cthis is trace log\u201d);"
            }
        ],
        "class": "Logger"
    },
    {
        "methods": [
            {
                "descs": [
                    "해당 파일(filename)을 감시하면서 새로운 line이 추가될 때마다 onLine Function을 실행한다. filename에는 $yyyy$mm$dd$hh$mi$ss 와 같이 date format 지정이 가능하며 이에 따른 파일 switching 시에 deleteExpiredFile 변수를 통해 지나간 파일을 지울지 여부를 선택할 수 있다.",
                    "캐릭터셋은 UTF-8 로 설정된다."
                ],
                "title": "void monitorFileNewLine(String filename, Function onLine, boolean deleteExpiredFile)",
                "example": "var onLine = new com.igloosec.SpDbReader.common.Function(){\n\texecute:function(args){\n\t\tvar line=args[0];\n\t\tlogger.info(\"line is : \" + line);\n\t} //execute\n} //onLine\nfileReader.monitorFileNewLine(\"/data/test_$yyyy$mm$dd$hh$mi.log\", onLine, true);"
            },
            {
                "descs": [
                    "해당 파일(filename)을 감시하면서 새로운 line이 추가될 때마다 onLine Function을 실행한다. filename에는 $yyyy$mm$dd$hh$mi$ss 와 같이 date format 지정이 가능하며 이에 따른 파일 switching 시에 deleteExpiredFile 변수를 통해 지나간 파일을 지울지 여부를 선택할 수 있다.",
                    "charset 항목에는 케릭터 셋을 지정한다. 지정 가능한 캐릭터셋은 Java Standard Charset(http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html) 이외에 SpDbReader 가 사용하는 jvm 에서 지원하는 캐릭터 셋에 한한다."
                ],
                "title": "void monitorFileNewLine(String filename, Function onLine, boolean deleteExpiredFile, String charset)",
                "example": "var onLine = new com.igloosec.SpDbReader.common.Function(){\n\texecute:function(args){\n\t\tvar line=args[0];\n\t\tlogger.info(\"line is : \" + line);\n\t} //execute\n} //onLine\nfileReader.monitorFileNewLine(\"/data/test_$yyyy$mm$dd$hh$mi.log\", onLine, true, \"euc-kr\");"
            },
            {
                "descs": [
                    "해당 파일(filename)을 감시하면서 새로운 line이 추가될 때마다 onLine Function을 실행한다. filename에는 $yyyy$mm$dd$hh$mi$ss 와 같이 date format 지정이 가능하며 이에 따른 파일 switching 시에 deleteExpiredFile 변수를 통해 지나간 파일을 지울지 여부를 선택할 수 있다.",
                    "파일 지정시 timeAdjustSec 파라미터를 통해 읽고자 하는 파일의 시간대를 조정할 수 있다.",
                    "charset 항목에는 케릭터 셋을 지정한다. 지정 가능한 캐릭터셋은 Java Standard Charset(http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html) 이외에 SpDbReader 가 사용하는 jvm 에서 지원하는 캐릭터 셋에 한한다.",
                    "added version : 0.93b"
                ],
                "title": "void monitorFileNewLine(String filename, Function onLine, boolean deleteExpiredFile, String charset, int timeAdjustSec)",
                "example": "var onLine = new com.igloosec.SpDbReader.common.Function(){\n\texecute:function(args){\n\t\tvar line=args[0];\n\t\tlogger.info(\"line is : \" + line);\n\t} //execute\n} //onLine\nfileReader.monitorFileNewLine(\"/data/test_$yyyy$mm$dd$hh$mi.log\", onLine, true, \"euc-kr\", -60);"
            },
            {
                "descs": ["해당 파일(filename)의 내용을 모두 읽어 반환한다."],
                "title": "String readAll(String filename)",
                "example": "var result = fileReader.readAll(\"/data/test.txt\");"
            },
            {
                "descs": ["해당 파일(filename)의 내용을 모두 읽어 반환한다. 파라미터 delete가 true인 경우 읽은 파일을 삭제한다."],
                "title": "String readAll(String filename, boolean delete)",
                "example": "var result = fileReader.readAll(\"/data/test.txt\", true); //파일 읽은 후에 삭제"
            },
            {
                "descs": ["해당 파일(filename)의 내용을 최대 maxBytes 만큼만 읽어 반환한다. 파라미터 delete가 true인 경우 읽은 파일을 삭제한다."],
                "title": "String readAll(String filename, boolean delete, long maxBytes)",
                "example": "var result = fileReader.readAll(\"/data/test.txt\", false, 1*1024*1024); //최대 1MB 만큼만 읽는다."
            }
        ],
        "class": "FileReader"
    },
    {
        "methods": [{
            "descs": ["출력 파일의 삭제를 위한 모니터링을 시작한다. period 주기마다 파일에 마지막으로 write된 시간을 감시하며 현재시간으로부터 expiredTime 만큼 경과했을 경우 해당 파일을 삭제한다. period와 expiredTime은 모두 밀리초 기준으로 작성되어야 한다."],
            "title": "void startMonitoring(long period, long expiredTime)",
            "example": "outputFileDeleteTask.startMonitoring(10*1000, 3*60*60*1000);"
        }],
        "class": "OutputFileDeleteTask"
    },
    {
        "methods": [{
            "descs": ["파라미터로 전달된 문자열(line)에서 구분자(delimiter) 기준으로 특정 부분에 있는 부분 문자열을 추출하여 반환한다."],
            "title": "String stringAt(String line, String delimiter, int index)",
            "example": "var result = stringUtil.stringAt(\"aaa,bbb,ccc,ddd\", \",\", 2); // ccc 반환"
        }],
        "class": "StringUtil"
    }
]
